;; Org mode setting 

* Repositories
  #+BEGIN_SRC emacs-lisp

(setq package--init-file-ensured t)

;;Load package.el
(require 'package)

;;Add melpa to list of repositories
(add-to-list 'package-archives
	     '("melpa" . "http://melpa.milkbox.net/packages/") 
             t)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)

(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

;;Initialize package.el
(package-initialize)

;;Create repositories cache, if required
(when (not package-archive-contents)
  (package-refresh-contents))


  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* System

  #+BEGIN_SRC emacs-lisp

(setq epg-gpg-program "gpg") 


(customize-set-variable 'tramp-use-ssh-controlmaster-options t)
(setq tramp-inline-compress-start-size 50000)


(setq
   backup-by-copying t      ; don't clobber symlinks
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t) 

(setq backup-dir "~/.emacs.d/backup/")
(add-to-list 'backup-directory-alist (cons "." backup-dir))
(add-to-list 'backup-directory-alist (cons tramp-file-name-regexp backup-dir))

(global-display-line-numbers-mode t)

(setq large-file-warning-threshold 100000000)

(normal-erase-is-backspace-mode 0)

(defalias 'yes-or-no-p 'y-or-n-p)

(load "server")
(unless (server-running-p) (server-start))


(setq custom-safe-themes t)

(setq neo-vc-integration nil) 
  

(setq browse-url-browser-function 'browse-url-chromium)
(setq european-calendar-style 't)

(setq calendar-week-start-day 1
            calendar-day-name-array ["Вс" "Пн" "Вт" "Ср" "Чт" "Пт" "Сб"]
            calendar-month-name-array ["Январь" "Февраль" "Март" "Апрель" "Май" 
                                       "Июнь" "Июль" "Август" "Сентябрь"
                                       "Октябрь" "Ноябрь" "Декабрь"])




;; (setq epa-pinentry-mode 'loopback)


  ;;Enforce spaces for indentation, instead of tabs
  (setq-default indent-tabs-mode 
                nil)





;;Disable menu-bar
(menu-bar-mode -1)

;;Disable tool-bar
(tool-bar-mode -1)

;;Disable scroll-bar
(scroll-bar-mode 1)

(custom-set-faces
 '(default ((t (:height 120)))))

(delete-selection-mode 1)


  ;;Disable splash message, start *scratch* buffer by default
  (setq initial-buffer-choice 
        t)
  (setq initial-scratch-message 
        "")



  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC
  
* Packages 
  #+BEGIN_SRC emacs-lisp


    ;; Declare a list of required packages
    (defvar emacs-required-packages
      '(
        use-package
        imenu-list
        which-key
        overcast-theme
        color-theme-sanityinc-tomorrow

        angular-mode
        skewer-mode
        nginx-mode
        apache-mode
        magit
        ag
        ripgrep
        dumb-jump
        flycheck
        xah-fly-keys
        org-bullets
        org-caldav
        org-gcal
        oauth2
       )
    )



    ;;Install required packages
    (mapc (lambda (p)
            (package-install p))
            emacs-required-packages)

            (setq imenu-list-auto-resize nil)
            (setq imenu-list-position 'right)

    ;; * Try
    (use-package try
    :ensure t
      :init
      :config
      )


    ;; * Ibuffer

    ;; (ibuffer-auto-mode 1)

    ;; Don't ask for confirmation to delete marked buffers
    (setq ibuffer-expert t)




    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;;Configure and enable sublimity-mode
    ;;(require 'sublimity-scroll)
    ;;(sublimity-mode)

    ;;Load default auto-complete configs

    ;; (use-package auto-complete 
    ;; :ensure t
    ;; :config
    ;; )

    ;; (ac-config-default)

    (setq imenu-list-focus-after-activation t)

    (add-hook 'after-init-hook 'global-company-mode)

    ;;Start which-key-mode
    (which-key-mode)

    ;;Set up ace-jump-mode
    (autoload 'ace-jump-mode 
      "ace-jump-mode" 
      "Emacs quick move minor mode"
      t)
    (autoload 'ace-jump-mode-pop-mark 
      "ace-jump-mode" 
      "Ace jump back:-"
      t)
    ;; 




    (global-flycheck-mode t)

    ;; (add-hook 'prog-mode-hook 'flycheck-mode)
    ;; (add-hook 'text-mode-hook 'flycheck-mode)


    ;; (setq flycheck-phpmd-rulesets '("cleancode"))

    (setq bookmark-save-flag 1)


    ;; Rainbow Delimiters




    (require 'recentf)
    ;; (setq recentf-auto-cleanup 'never) ;; disable before we start recentf!
    (recentf-mode 1)
    (setq recentf-max-menu-items 250)
    (setq recentf-max-saved-items 250)

    ;; (edit-server-start)


  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* All-The-Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)

#+END_SRC


* Themes
  #+BEGIN_SRC emacs-lisp

(use-package doom-themes
:ensure t
:config
(load-theme 'doom-one t)
)

(use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode))
  #+END_SRC


  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Tramp 
  #+BEGIN_SRC emacs-lisp
(setq explicit-shell-file-name "/bin/bash")
(add-hook 'shell-mode-hook  'with-editor-export-editor)
(add-hook 'term-exec-hook   'with-editor-export-editor)
(add-hook 'eshell-mode-hook 'with-editor-export-editor)

(setq tramp-ssh-controlmaster-options "")

  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Grep 
  #+BEGIN_SRC emacs-lisp
;; find-grep template command
(customize-set-variable 'grep-find-command
(quote
("find . -type f -exec grep --color -nH --null -ie \"\" \\{\\} +" . 51)))


  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Org

  - Org mode
  #+BEGIN_SRC emacs-lisp
(use-package org
:ensure t)



(setq org-agenda-files '("~/Документы/org"))

(setq org-default-notes-file (concat org-directory "~/Документы/org/toDo.org"))

(setq org-capture-templates
      '(
        ("t" "Todo" entry (file "~/Документы/org/toDo.org" ) "* TODO %?\n  %i %a")
        ("a" "Addresat-Todo" entry (file "~/Документы/org/adresat-ToDo.org") "* TODO %?\n  %i\n  %a") 
        ))

(org-babel-do-load-languages
   'org-babel-do-load-languages
   '(
     (sh . t)
     (python . t)
     (php . t)
     (js . t)
     ))

;; (setq org-bullets-bullet-list '("☯" "○" "✸" "✿" "~"))
(add-hook 'org-mode-hook (lambda () 
(org-bullets-mode 1)
(yas-minor-mode)
))

  #+END_SRC

  - Fonts
  #+BEGIN_SRC emacs-lisp
(custom-set-faces
'(org-document-info-keyword ((t (:inherit shadow :foreground "gray26"))))
'(org-document-title ((t (:weight bold :height 1.4))))
'(org-meta-line ((t (:foreground "gray26"))))
)

(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Reveal

  #+BEGIN_SRC emacs-lisp
(use-package org-re-reveal
:ensure org-re-reveal
:config
(setq org-re-reveal-root "https://revealjs.com/")
)

(use-package htmlize
:ensure t)
  

  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Yasnippet

  #+BEGIN_SRC emacs-lisp
(use-package yasnippet
:ensure t
:config
(yas-reload-all))

(use-package yasnippet-snippets
:ensure t)

(add-hook 'prog-mode-hook #'yas-minor-mode)
  #+END_SRC


  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Magit 

  #+BEGIN_SRC emacs-lisp
  (use-package magit
  :ensure t)
  (add-hook 'magit-mode-hook 'xah-fly-insert-mode-activate)

  (defun ab-stage-commit-push(message)
  "Stage all commit and pusht."
    (interactive "sCommit Message: ")
    ;; (magit-stage-modified t)

    (magit-run-git "commit" "-am" message)
    (magit-push-current-to-pushremote nil)
  )



  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Custom functions
  #+BEGIN_SRC emacs-lisp
  ;; 
  ;; ab-PACKAGES SETS
  ;;

  (defun cp1251 ()
    (interactive)
    (revert-buffer-with-coding-system 'cp1251)
    )

  (defun finish-line ()
    (interactive)
    (end-of-line)
    (when (not (looking-back ";"))
      (insert ";")))

 

  (defun emacs-reload-current-file ()
    "Reload current buffer file from the disk"
    (interactive)
    (cond (buffer-file-name (progn (find-alternate-file buffer-file-name)
                                   (message "File reloaded")))
          (t (message "You're not editing a file!"))))



  ;;Enable show-paren-mode
  (show-paren-mode 1)

  ;;Enable winner-mode
  (winner-mode t)

  ;;Enable windmove
  (windmove-default-keybindings 'meta)

  (save-place-mode 1)




  ;;(require 'server)
  ;;(unless (server-running-p)
  ;;  (server-start))





  (defun flush-empty-lines()
    "Remove emty string from buffer"
      (interactive)
      (flush-lines "^[[:space:]]*$"))

  (defun eshell-clear ()
    "Clear the eshell buffer."
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))


  (defun run-current-file ()
    "Execute or compile the current file.
  For example, if the current buffer is the file x.pl,
  then it'll call “perl x.pl” in a shell.
  The file can be php, perl, python, ruby, javascript, bash, ocaml, vb, elisp.
  File suffix is used to determine what program to run.
  If the file is modified, ask if you want to save first. (This command always run the saved version.)
  If the file is emacs lisp, run the byte compiled version if exist."
    (interactive)
    (let (suffixMap fName fSuffix progName cmdStr)

      ;; a keyed list of file suffix to comand-line program path/name
      (setq suffixMap 
            '(("php" . "php")
              ;; ("coffee" . "coffee -p")
              ("pl" . "perl")
              ("py" . "python")
              ("rb" . "ruby")
              ("js" . "node")             ; node.js
              ("sh" . "bash")
              ("ml" . "ocaml")
              ("vbs" . "cscript")))
      (setq fName (buffer-file-name))
      (setq fSuffix (file-name-extension fName))
      (setq progName (cdr (assoc fSuffix suffixMap)))
      (setq cmdStr (concat progName " \""   fName "\""))

      (when (buffer-modified-p)
        (progn 
          (when (y-or-n-p "Buffer modified. Do you want to save first?")
            (save-buffer) ) ) )

      (if (string-equal fSuffix "el") ; special case for emacs lisp
          (progn 
            (load (file-name-sans-extension fName)))
        (if progName
            (progn
              (message "Running…")
              ;; (message progName)
              (shell-command cmdStr "*run-current-file output*" ))
          (message "No recognized program file suffix for this file.")))
      ))




  (defun file-metadata ()
    (interactive)
    (let* ((fname (buffer-file-name))
           (data (file-attributes fname))
           (access (current-time-string (nth 4 data)))
           (mod (current-time-string (nth 5 data)))
           (change (current-time-string (nth 6 data)))
           (size (nth 7 data))
           (mode (nth 8 data)))
      (message
       "%s:
    Accessed: %s
    Modified: %s
    Changed: %s
    Size: %s bytes
    Mode: %s"
       fname access mod change size mode)))



  (defun ab-goto-recent-directory ()
    "Open recent directory with dired"
    (interactive)
    (unless recentf-mode (recentf-mode 1))
    (let ((collection
           (delete-dups
            (append (mapcar 'file-name-directory recentf-list)
                    ;; fasd history
                    (if (executable-find "fasd")
                        (split-string (shell-command-to-string "fasd -ld") "\n" t))))))
      (ivy-read "Recent directories:" collection :action 'dired)))


  (defun ab-goto-recent-file ()
    "Open recent directory with dired"
    (interactive)
    (unless recentf-mode (recentf-mode 1))
    (ivy-read "Recent files:" recentf-list :action 'find-file))





  ;; Change (..) to [..], '..' to ".." and back
  (defun ab-change-bracket-pair ()
      (interactive )
      (xah-goto-matching-bracket)

      ;; (backward-char)
      (cua-set-mark)
      ;; (forward-char)
      (xah-goto-matching-bracket)

      ;; cycle pair
      (case (char-before)
        ((?') (xah-insert-bracket-pair "\"" "\""))
        ((?\") (xah-insert-bracket-pair "'" "'"))
        ((?\)) (xah-insert-bracket-pair "[" "]"))
        ((?\]) (xah-insert-bracket-pair "(" ")"))
        )

    
      (backward-char)
      (xah-delete-backward-bracket-pair)
      (forward-char)

      )



  (setq auto-save-default nil)


  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))


  ;; grep search templete
  (setq grep-find-template "find . <X> -type f <F> -exec grep <C> -nH -e -i \"<R>\" \\{\\} +")



  (setq ido-use-filename-at-point 'guess)
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)


  (global-subword-mode 1)

  ;; Crypt org files 
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
    ;; GPG key to use for encryption
    ;; Either the Key ID or set to nil to use symmetric encryption.
  ;; (setq org-crypt-key nil)

  (setq org-crypt-key "3FEE3795")   
  (setq epa-file-select-keys nil)



  (setq org-support-shift-select t)



  (setq org-todo-keywords
  '((sequence "TODO" "PROCESS" "DELEGATED" "|" "DONE")))

(setq org-todo-keyword-faces
  '(("TODO" . (:foreground "#ff39a3" :weight bold))
("PROCESS" . "green")
("CANCELED" . (:foreground "white" :background "#4d4d4d" :weight bold))
;;("DELEGATED" . "")
("POSTPONED" . "#008080")))


(setq org-todo-sort-order '("PROCESS" "DELEGATED" "TODO" "" "DONE"))

(defun my:user-todo-sort (a b)
  "Sort todo based on which I want to see first"
  (when-let ((state-a (get-text-property 14 'todo-state a))
             (state-b (get-text-property 14 'todo-state b))
             (cmp (--map (cl-position-if (lambda (x)
                                           (equal x it))
                                         org-todo-sort-order)
                         (list state-a state-b))))
    (cond ((apply '> cmp) 1)
          ((apply '< cmp) -1)
          (t nil))))
(setq org-agenda-cmp-user-defined 'my:user-todo-sort)



  (setq xah-fly-use-meta-key nil) ; must come before loading xah-fly-keys
  (require 'xah-fly-keys)

  (xah-fly-keys-set-layout "qwerty") ; required if you use qwerty

  (xah-fly-keys 1)



  (electric-pair-mode 1)

  (skewer-setup)

  (setq visible-bell 1)
   (setq ring-bell-function 
        (lambda ()
          (unless (memq this-command
                        '(isearch-abort abort-recursive-edit exit-minibuffer keyboard-quit))
            (ding))))



  (setq background-color (face-attribute 'default :background)) ;; #2d2d2d

  (setq fringe-color "#323232")


  (defun highlight-selected-window ()
    "Highlight selected window with a different background color."
    (walk-windows (lambda (w)
                    (unless (eq w (selected-window))
                      (with-current-buffer (window-buffer w)
                        (buffer-face-set '(:background "#1f2229"))))))
    (buffer-face-set 'default))
  (add-hook 'buffer-list-update-hook 'highlight-selected-window)




  (defadvice delete-frame (after delete-frame-set-background)
    (set-background-color "#1f2229"))
  (ad-activate 'delete-frame)



  (defun ab-xfk-command-color ()
    ;; (set-background-color background-color)
    ;; (set-face-background 'fringe fringe-color)
    (global-hl-line-mode 0)

    ;; (set-face-background 'mode-line fringe-color) 
    ;; (set-face-background 'mode-line-inactive fringe-color)
    ;; (shell-command "
  ;; setxkbmap -layout 'us' &
  ;; setxkbmap -layout 'us,ru' &
  ;; setxkbmap -option 'ctrl:nocaps,grp:alt_shift_toggle,grp_led:caps' &
    ;; 
  ;; xmodmap -e 'keycode 66 = Menu' &
  ;; ")
  )    
  (defun ab-xfk-insert-color ()
    ;; (set-background-color "#282828")
    ;; (set-face-background 'fringe "dim gray")
    (global-hl-line-mode 1)
    ;; (set-face-background 'mode-line "#767676") 
    ;; (set-face-background 'mode-line-inactive "#767676")   

    )  


  (global-hl-line-mode 0)
  ;; (set-face-background hl-line-face "DarkOliveGreen")

  (setq dumb-jump-max-find-time 10)


  (add-hook 'xah-fly-command-mode-activate-hook 'ab-xfk-command-color)
  (add-hook 'xah-fly-insert-mode-activate-hook  'ab-xfk-insert-color)

  (blink-cursor-mode 0)

  (setq skewer-refresh-onsave nil) 

  (defun ab-skewer-start-browser-refresh () (interactive) (setq skewer-refresh-onsave t) (run-skewer) )
  (defun ab-skewer-stop-browser-refresh () (interactive) (setq skewer-refresh-onsave nil) )
  ;; In skawer mode refresh linked browser page by save file
  (defun my-after-save-actions () "Used refresh" (when skewer-refresh-onsave (skewer-eval "location.reload()" ) ))

  (defun skawer-mode-hook-onsave () (add-hook 'after-save-hook 'my-after-save-actions) )

  (add-hook 'skewer-mode-hook 'skawer-mode-hook-onsave)
 
 

  (defun alarm() (call-process "paplay" "~/.emacs.d/alarm3.wav"))


  (defun ab-run-lastcommand-in-next-eshell-window () 
   (xah-next-window-or-frame)
   (end-of-buffer)
   (eshell-previous-matching-input-from-input 1)
   ;; (newline)
   (eshell-send-input)
   (xah-next-window-or-frame)
  )
 
  (defun ab-eshell-start-lastcommand-by-save () 
    (interactive)
    (add-hook 'after-save-hook 'ab-run-lastcommand-in-next-eshell-window)
  )
     
  (defun ab-eshell-stop-lastcommand-by-save () 
    (interactive)
    (remove-hook 'after-save-hook 'ab-run-lastcommand-in-next-eshell-window)
  )




  ;; ("j" "Journal" entry (file+datetree "~/org/journal.org")"* %?\nEntered on %U\n  %i\n  %a")
  ;; ("a" "Addresat-Todo" entry (file+headline "~/Документы/org/adresat-ToDo.org" "") "* TODO %?\n  %i\n  %a") 




  ;; Export to ics for google




  ;;; define categories that should be excluded









  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Swiper, counsel, anzu and phi-search
  #+BEGIN_SRC emacs-lisp

    (use-package counsel
    :ensure t
    )

    (use-package swiper
    :ensure try
    :config
    (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-initial-inputs-alist nil)
    ;; swiper for symbol at point
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (define-key read-expression-map (kbd "C-r") 'counsel-minibuffer-history)
    (define-key ivy-minibuffer-map (kbd "C-c o") 'ivy-occur)
    ))


    ;; (defun ab-swiper (start end)
    ;;   (interactive "r")
    ;;   (if (use-region-p)
    ;;   (setq regionp (buffer-substring start end))
    ;;   (setq regionp nil))

    ;;   (if (not regionp) 
    ;;   (ab-counsel-grep-or-swiper) 
    ;;   (ab-counsel-grep-or-swiper regionp)))     


    (defun ab-swiper ()
      (interactive)
      (setq sym (symbol-at-point))
      (if (not sym) (ab-counsel-grep-or-swiper) (ab-counsel-grep-or-swiper (symbol-name sym)) )
    )




    (defun ab-counsel-grep-or-swiper (&optional initial-input)
    "Call `swiper' for small buffers and `counsel-grep' for large ones.
    When non-nil, INITIAL-INPUT is the initial search pattern."
    (interactive)
    (if (or (not buffer-file-name)
    (buffer-narrowed-p)
    (jka-compr-get-compression-info buffer-file-name)
    (funcall counsel-grep-use-swiper-p))
    (swiper initial-input)
    (when (file-writable-p buffer-file-name)
    (save-buffer))
    (counsel-grep initial-input)))

    (setq counsel-grep-swiper-limit 1000000)


    (use-package phi-search
     :ensure t
     :config
     (global-set-key (kbd "C-f") 'phi-search))

     


#+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Avy 
#+BEGIN_SRC emacs-lisp
(use-package avy
:ensure t
:bind ("M-s" . avy-goto-char))
#+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* PCRE2EL
  #+BEGIN_SRC emacs-lisp
  (use-package pcre2el
  :ensure t
  :config
  (pcre-mode)
  )
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Smooth scrolling

  #+BEGIN_SRC emacs-lisp
    ;; (use-package smooth-scrolling :ensure t
      ;; :config
      ;; (
       ;; smooth-scrolling-mode 1))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Company 
  #+BEGIN_SRC emacs-lisp

(use-package company :ensure t
             :config
             (add-hook 'after-init-hook 'global-company-mode)
             (add-to-list 'company-backends 'company-web)
             (add-to-list 'company-backends 'company-quickhelp)
             (add-to-list 'company-backends 'company-php)
             (add-to-list 'company-backends 'company-ac-php-backend)
             (add-to-list 'company-backends 'php-extras-company)
             (add-to-list 'company-backends 'company-Yasnippet)
             (add-to-list 'company-backends 'company-dabbrev)
             (add-to-list 'company-backends 'company-capf)
             (add-to-list 'company-backends 'company-files)
             (setq company-tooltip-limit 20)
             (setq company-tooltip-align-annotations 't)
             (setq company-idle-delay .3)
             (setq company-minimum-prefix-length 1)
             (setq company-begin-commands '(self-insert-command))


(custom-set-faces
 '(company-preview
   ((t (:foreground "darkgray" :underline t))))
 '(company-preview-common
   ((t (:inherit company-preview))))
 '(company-tooltip
   ((t (:background "lightgray" :foreground "black"))))
 '(company-tooltip-selection
   ((t (:background "black" :foreground "white"))))
 '(company-tooltip-common
   ((((type x)) (:inherit company-tooltip :weight bold))
    (t (:inherit company-tooltip))))
 '(company-tooltip-common-selection
   ((((type x)) (:inherit company-tooltip-selection :weight bold))
    (t (:inherit company-tooltip-selection)))))

)


(use-package company-php :ensure t)
(use-package company-web :ensure t)
(use-package company-quickhelp :ensure t)

  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Web-mode

  #+BEGIN_SRC emacs-lisp
(use-package web-mode
:ensure t
:config
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(setq web-mode-engines-alist
'(("django"    . "\\.html\\'")))
(setq web-mode-ac-sources-alist
'(("css" . (ac-source-css-property))
("html" . (ac-source-words-in-buffer ac-source-abbrev))))

(setq web-mode-enable-auto-closing t)
(setq web-mode-enable-auto-quoting t)) ; this fixes the quote problem I mentioned



  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* PHP

  #+BEGIN_SRC emacs-lisp

    ;; php mode
    (use-package php-mode 
    :ensure t)

    ;; php code sniffer
    (use-package phpcbf
    :ensure t
    :config
    (setq phpcbf-standard "PSR2")
    (setq php-mode-coding-style (quote psr2))
    (add-hook 'php-mode-hook 'phpcbf-enable-on-save)
    )

    ;; php flycheck
    (setq flycheck-phpmd-rulesets '("cleancode" "codesize" "controversial" "design" "naming" "unusedcode"))
    (add-hook 'php-mode-hook (lambda () (setq flycheck-phpcs-standard "PSR2")))

    ;; auto-complete & company-mode for php
    ;; (use-package ac-php :ensure t
                ;; :config
                ;; (ac-php-core-eldoc-setup))

    (setq geben-dbgp-default-port 9001)


  #+END_SRC



  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC
* Perl
  #+BEGIN_SRC emacs-lisp
    ;; (add-hook perl-mode-hook (lambda () (local-unset-key (kbd "tab"))))
  #+END_SRC
* Web Beautify

  #+BEGIN_SRC emacs-lisp
(use-package web-beautify :ensure t)
(defun ab-beautify-code ()
  "Beautify CSS, HTML or JS"
  (interactive)
  (cond
    ((eq major-mode 'js-mode) (web-beautify-js))
    ((eq major-mode 'js2-mode) (web-beautify-js))
    ((eq major-mode 'json-mode) (web-beautify-js))
    ((eq major-mode 'web-mode) (web-beautify-html))
    ((eq major-mode 'xah-css-mode) (web-beautify-css))
    ((eq major-mode 'css-mode) (web-beautify-css))
    ((eq major-mode 'scss-mode) (web-beautify-css))
    ((indent-region (point-min) (point-max)))))

  #+END_SRC


  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Rainbow

  - Colorize colors #ff0000
  #+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'rainbow-mode))
  #+END_SRC

  - Rainbow parentheses
  #+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
  #+END_SRC


  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Projectile 
  
  #+BEGIN_SRC emacs-lisp


  ;; projectile
  (use-package projectile
  :ensure t
  :config
  (projectile-global-mode)
  ;; (setq projectile-completion-system 'ivy)
  (setq projectile-mode-line "x Projectile x")
  (setq projectile-indexing-method 'alien)
  (setq projectile-enable-caching t)
  (setq projectile-git-submodule-command nil)
  )

  (use-package counsel-projectile
  :ensure t)

  #+END_SRC
  - Set projec name in var for perfomance. 
  #+BEGIN_SRC emacs-lisp
  (setq project-name (projectile-project-name))
  ;; Set my-projectile-project-name to projectile-project-name,
  ;; so that later I can also set projectile project name when in *Messages* buffer etc
  (defun my-projectile-switch-project-action ()
    (when (not (equal (projectile-project-name) "-"))
      (progn
       (setq project-name (projectile-project-name))
       (setq frame-title-format '("Emacs: " "%b" (:eval (format " in [%s]" project-name) ))))))


  (add-hook 'projectile-after-switch-project-hook 'my-projectile-switch-project-action)
  (add-hook 'find-file-hook 'my-projectile-switch-project-action)


  (defun ab-set-project-name-manual ()
    "Set project name manualy and put it to frame title"
    (interactive)
    (setq project-name (read-string "Enter project name: "))
    (setq frame-title-format '("Emacs: " "%b" (:eval (format " in [%s] (m)" project-name) )))
    )

  #+END_SRC

  - Keys
  #+BEGIN_SRC emacs-lisp
(define-key projectile-mode-map (kbd "C-p") 'projectile-command-map)
(define-key projectile-command-map (kbd "m") 'magit-status)
(define-key projectile-command-map (kbd "P") 'ab-stage-commit-push)
(define-key projectile-command-map (kbd "F") (lambda ()(interactive) (magit-pull-from-pushremote nil)))
(define-key projectile-command-map (kbd "n") 'ab-set-project-name-manual)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Smex
  Smart M-x command
  #+BEGIN_SRC emacs-lisp
  (use-package smex
  :ensure t
  :config
  (smex-initialize)
  )
  #+END_SRC


  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Dired
  #+BEGIN_SRC emacs-lisp

  (use-package dired
  :ensure nil
  :config
  (progn
  (setq dired-dwim-target t)
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file) ; was dired-advertised-find-file
  (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory
  ;; to trump
  (setq ange-ftp-ftp-program-name "pftp")
  (setq ange-ftp-try-passive-mode nil) 
  (setq dired-listing-switches "-aBhlF --group-directories-first")

  ;; Show file details by default
  (defun ab-dired-mode-setup () (dired-hide-details-mode 0))
  (add-hook 'dired-mode-hook 'ab-dired-mode-setup)

  ))

  ;; Dired-x. Extra features
  (use-package dired-x
  :ensure nil
  :config
  (add-hook 'dired-load-hook (function (lambda () (load "dired-x")))))

  ;; Dired-launch. launch files in external app
  ;; (use-package dired-launch
  ;; :ensure nil
  ;; :
  ;; config
  ;; ; ;Set hooks for dired-launch-mode
  ;; (add-hook 'dired-mode-hook 'dired-launch-mode) )

  ;; Dired+
  ;; need to load manualy
  ;; https://github.com/emacsmirror/emacswiki.org/blob/master/dired%2b.el

  (when (require 'dired+ nil 'noerror)
         (message "Hello"))



  ;; Style of omit files in dired
  (custom-set-faces
  '(diredp-omit-file-name ((t (:inherit diredp-ignored-file-name :foreground "gray29")))))

  ;; install dired+ from file
  (when (not (require 'dired+ nil 'noerror)) 
    (package-install-file "dired+.el"))
    (require 'dired+)



  #+END_SRC




  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
  :ensure t 
  :config
  (setq neo-smart-open t))
#+END_SRC
* Multiple cursors

  #+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
  :ensure t
  :config
  )
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Keybindings

  #+BEGIN_SRC emacs-lisp
;; 
;; ab-KEYS
;;





    ;; 

(defvar major-keyboard-bindings
  '(
    ;; ("C-x C-f" . ido-find-file )
    ;; ("C-x C-r" . helm-recentf)
    ;; ("C-x k" . kill-this-buffer)
    ("C-c a" . org-agenda)
    ("C-c g" . org-caldav-sync)
    
    ;; ("C-c a c" . org-caldav-sync);; sync with google calendar
    ("C-c t" . org-capture)
    ("C-w" . kill-this-buffer)
    ("<M-tab>" . other-window)
    ;; ("C-s" . save-buffer )
    ;; ("C-S-s" . write-file )
    ("C-f" . phi-search)
    ("M-S-<down>" . buf-move-down)
    ("M-S-<left>" . buf-move-left)
    ("M-S-<right>" . buf-move-right)
    ("C-r" . emacs-reload-current-file)
    ;; ("<escape>" . keyboard-escape-quit)
    ("C-;" . finish-line)
    ;; ("C-d" . duplicate-thing)
    ;; ("C-c w" . copy-word)
    ;; ("C-x g" . magit-status)
    ("M-d" . xah-delete-backward-char-or-bracket-text)
    ("M-e" . xah-backward-kill-word)
    ("M-r" . xah-kill-word)
    ("M-o" . forward-word)
    ("M-u" . backward-word)
    ("M-h" . xah-beginning-of-line-or-block)
    ("M-;" . xah-end-of-line-or-block)
    ("M-." . dumb-jump-go)
    ("M-," . dumb-jump-back)
    ("<f5>" . call-last-kbd-macro)
    ("<f8>" . other-frame)
    )
  )
(defun apply-major-keyboard-bindings (pair)
  "Apply keyboard-bindings for supplied list of key-pair values"
  (global-set-key (kbd (car pair))
                  (cdr pair)))

(mapc 'apply-major-keyboard-bindings
      major-keyboard-bindings)


;; set Menu/App key to do emacs's C-x http://ergoemacs.org/emacs/emacs_dvorak_C-x.html
;; (global-set-key (kbd "<menu>") ctl-x-map)


(global-set-key (kbd "C-1") (lambda ()(interactive) (bookmark-jump "1")))
(global-set-key (kbd "C-2") (lambda ()(interactive) (bookmark-jump "2")))
(global-set-key (kbd "C-3") (lambda ()(interactive) (bookmark-jump "3")))
(global-set-key (kbd "C-4") (lambda ()(interactive)  (bookmark-jump "4")))


(define-key isearch-mode-map (kbd "C-o") 'isearch-occur)
(define-key isearch-mode-map (kbd "C-f") 'isearch-repeat-forward)
(define-key isearch-mode-map (kbd "C-v") 'isearch-yank-kill)
(define-key isearch-mode-map (kbd "C-d") 'isearch-word)



;; Xah fly keys                            
(add-hook 'php-mode-hook
          (function (lambda ()
                      (local-unset-key (kbd "<M-tab>"))
                      (local-unset-key (kbd "C-d"))
                      (local-unset-key (kbd "C-b"))
                      (local-unset-key (kbd "C-h"))
                      (local-unset-key (kbd "C-;"))
)))


(add-hook 'xah-fly-key-hook
          (function (lambda ()
                      (local-unset-key (kbd "<f7>"))
                      (local-unset-key (kbd "C-1"))
                      (local-unset-key (kbd "C-2"))
                      )))


;; (defun controlG() (interactive) (kbd "C-g"))

(define-key key-translation-map (kbd "ESC") (kbd "C-g"))

(define-key xah-fly-key-map (kbd "<f7>") 'run-current-file)

;; (define-key xah-fly-key-map (kbd "`") 'xah-fly-leader-key-map) 
(global-set-key (kbd "`") 'xah-fly-command-mode-activate)
;; (global-set-key (kbd "<tab>") 'xah-fly-command-mode-activate) 

(add-hook 'xah-fly-command-mode-activate-hook
          (function (lambda ()

                      (local-unset-key (kbd "C-1"))
                      (local-unset-key (kbd "C-2"))
                      (local-unset-key (kbd "<f8>"))
                      (local-unset-key (kbd "<f9>"))
                      (local-unset-key (kbd "p"))
                      
                      (define-key xah-fly-key-map (kbd "1") (lambda ()(interactive)  (bookmark-jump "1")))  
                      (define-key xah-fly-key-map (kbd "2") (lambda ()(interactive)  (bookmark-jump "2")))

                      (define-key xah-fly-key-map (kbd "C-1") (lambda ()(interactive)  (bookmark-jump "1")))
                      (define-key xah-fly-key-map (kbd "C-2") (lambda ()(interactive)  (bookmark-jump "2")))

                      ;; (define-key xah-fly-key-map (kbd "<menu>") 'xah-fly-insert-mode-activate)
                      (define-key xah-fly-key-map (kbd "<home>") 'xah-fly-insert-mode-activate)

                      ;; Set xah fly for russian keyboard
                      (xah-fly--define-keys
                       xah-fly-key-map
                       '(
                         ("й" . xah-reformat-lines)
                         ("ц" . xah-shrink-whitespaces)
                         ("э" . xah-cycle-hyphen-underscore-space)
                         ("у" . xah-backward-kill-word)
                         ("я" . xah-comment-dwim)
                         ("х" . hippie-expand)
                         ("ф" . smex)
                         ("т" . isearch-forward)
                         ("ш" . previous-line)
                         ("р" . xah-beginning-of-line-or-block)
                         ("в" . xah-delete-backward-char-or-bracket-text)
                         ("н" . undo)
                         ("г" . backward-word)
                         ("о" . backward-char)
                         ("п" . xah-delete-current-text-block)
                         ("с" . xah-copy-line-or-region)
                         ("м" . xah-paste-or-paste-previous)
                         ("з" . xah-insert-space-before)
                         ("ь" . xah-backward-left-bracket)
                         ("д" . forward-char)
                         ("ы" . open-line)
                         ("к" . xah-kill-word)
                         ("ч" . xah-cut-line-or-region)
                         ("щ" . forward-word)
                         ("ж" . xah-end-of-line-or-block)
                         ("л" . next-line)
                         ("а" . xah-fly-insert-mode-activate)
                         ("б" . xah-next-window-or-frame)
                         ("и" . xah-toggle-letter-case)
                         ("е" . set-mark-command)
                         ))




                      (xah-fly--define-keys 
                       xah-fly-key-map
                       '(

                         ("a" . smex)
                         ("ф" . smex)
                         
                         ("m" . avy-goto-word-1)
                         ("ь" . avy-goto-word-1)

                         ("-" . universal-argument)
                         ("э" . universal-argument)
                         

                         ("b" . ab-swiper)
                         ("т" . ab-swiper)
                         
                         
                         ("i" . keyboard-quit)
                         ("п" . keyboard-quit)
                         
                         ("u" . ibuffer)     
                         ("а" . ibuffer)
                         
                         ("l" . projectile-command-map)
                         ("з" . projectile-command-map)     
                         ))


                         (setq mode-line-front-space "-- INSERT --")
                         (force-mode-line-update)
                      ;; (define-key xah-fly-key-map (kbd "p") 'projectile-command-map)                             
)))   

(add-hook 'xah-fly-insert-mode-activate-hook
          (function (lambda ()
                      
                      (local-unset-key (kbd "1"))
                      (local-unset-key (kbd "2"))
                      (local-unset-key (kbd "<f8>"))
                      (local-unset-key (kbd "<f7>"))

                      ;; (local-unset-key (kbd "p"))                      
                      ;; (local-unset-key (kbd "g"))
                      
                      ;; (define-key xah-fly-key-map (kbd "<menu>") 'xah-fly-command-mode-activate)
                      (define-key xah-fly-key-map (kbd "<home>") 'xah-fly-command-mode-activate)
                      ;; (define-key xah-fly-key-map (kbd "1") )

                      ;; Set xah fly for russian keyboard
                      (xah-fly--define-keys
                       xah-fly-key-map
                       '(
                         ("й" . nil)
                         ("ц" . nil)
                         ("э" . nil)
                         ("у" . nil)
                         ("я" . nil)
                         ("х" . nil)
                         ("ф" . nil)
                         ("т" . nil)
                         ("ш" . nil)
                         ("р" . nil)
                         ("в" . nil)
                         ("а" . nil)
                         ("н" . nil)
                         ("г" . nil)
                         ("о" . nil)
                         ("п" . nil)
                         ("с" . nil)
                         ("м" . nil)
                         ("з" . nil)
                         ("ь" . nil)
                         ("д" . nil)
                         ("ы" . nil)
                         ("к" . nil)
                         ("ч" . nil)
                         ("щ" . nil)
                         ("ж" . nil)
                         ("л" . nil)
                         ("а" . nil)
                         ("б" . nil)
                         ("и" . nil)
                         ("е" . nil)
                         ))

                      ;; (define-key projectile-mode-map (kbd "p") nil)
)))


;;(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(define-key xah-fly-r-keymap (kbd "c") 'mc/edit-lines)
(define-key xah-fly-r-keymap (kbd "m") 'mc/mark-more-like-this-extended)
(define-key xah-fly-r-keymap (kbd "M") 'mc/mark-all-like-this)

(define-key xah-fly-c-keymap (kbd "j") 'ab-goto-recent-file)
(define-key xah-fly-c-keymap (kbd "d") 'ab-goto-recent-directory)

(define-key xah-fly-e-keymap (kbd "c") 'xah-delete-backward-bracket-pair)
(define-key xah-fly-e-keymap (kbd "d") 'ab-change-bracket-pair)

(define-key xah-fly-n-keymap (kbd "e") 'revert-buffer-with-coding-system)
(define-key xah-fly-n-keymap (kbd "i") 'file-metadata)

(define-key xah-fly-t-keymap (kbd "b") 'ab-beautify-code)

(define-key xah-fly-comma-keymap (kbd "l") 'dumb-jump-go)
(define-key xah-fly-comma-keymap (kbd "k") 'dumb-jump-back)
(define-key xah-fly-comma-keymap (kbd ".") 'dumb-jump-go)
(define-key xah-fly-comma-keymap (kbd ",") 'dumb-jump-back)
(define-key xah-fly-comma-keymap (kbd "o") 'dumb-jump-go-other-windocomma)
(define-key xah-fly-comma-keymap (kbd "p") 'dumb-jump-go-prompt) 

;; leader w
(define-key xah-fly-comma-keymap (kbd "j") 'find-tag)
(define-key xah-fly-comma-keymap (kbd "s") 'ag)
(define-key xah-fly-comma-keymap (kbd "a") 'counsel-ag)
(define-key xah-fly-comma-keymap (kbd "r") 'counsel-git-grep)
(define-key xah-fly-comma-keymap (kbd "g") 'counsel-git)
(define-key xah-fly-comma-keymap (kbd "f") 'find-grep)
(define-key xah-fly-comma-keymap (kbd "x") 'counsel-M-x)

(define-key xah-fly-comma-keymap (kbd "w") 'ivy-resume)


(define-key xah-fly-comma-keymap (kbd "h") 'highlight-symbol-at-point)
(define-key xah-fly-comma-keymap (kbd "x") 'highlight-regexp)

;; (define-key xah-fly-c-keymap (kbd "q") 'helm-recentf)

(define-key xah-fly-leader-key-map (kbd "f") 'find-file)  
(define-key xah-fly-leader-key-map (kbd "j") 'ab-goto-recent-file)

(define-key xah-fly-leader-key-map (kbd "y") 'ivy-resume)

(define-key xah-fly-leader-key-map (kbd "b") 'imenu-list-smart-toggle)
(define-key xah-fly-leader-key-map (kbd "p") 'projectile-command-map)

(define-key xah-fly-leader-key-map (kbd "u") 'neotree-toggle)


(define-key xah-fly-leader-key-map (kbd "7") 'ispell-region)  
;; * Org mode
(define-key key-translation-map (kbd "<menu>") (kbd "C-c"))

(define-key org-mode-map (kbd "C-c q") 'org-set-tags)
(define-key org-mode-map (kbd "C-c e") 'org-export-dispatch)
(define-key org-mode-map (kbd "C-c d") 'org-deadline)
(define-key org-mode-map (kbd "C-c t") 'org-todo)




;; M-k.(kill-sentence &optional ARG)
;;https://www.alexkorablev.ru/2017/06/10/emacs-got-keys/
(defun reverse-input-method (input-method)
  "Build the reverse mapping of single letters from INPUT-METHOD."
  (interactive
   (list (read-input-method-name "Use input method (default current): ")))
  (if (and input-method (symbolp input-method))
      (setq input-method (symbol-name input-method)))
  (let ((current current-input-method)
        (modifiers '(nil (control) (meta) (control meta))))
    (when input-method
      (activate-input-method input-method))
    (when (and current-input-method quail-keyboard-layout)
      (dolist (map (cdr (quail-map)))
        (let* ((to (car map))
               (from (quail-get-translation
                      (cadr map) (char-to-string to) 1)))
          (when (and (characterp from) (characterp to))
            (dolist (mod modifiers)
              (define-key local-function-key-map
                (vector (append mod (list from)))
                (vector (append mod (list to)))))))))
    (when input-method
      (activate-input-method current))))

(reverse-input-method 'russian-computer)


  #+END_SRC

  #+BEGIN_SRC emacs-lisp
(message (number-to-string (cadr (time-subtract (current-time) ab-start-time))))
  #+END_SRC

* Anzy

#+BEGIN_SRC emacs-lisp


    (use-package anzu
     :ensure t
     :config
     (global-anzu-mode +1))
     (global-set-key [remap query-replace] 'anzu-query-replace)
     (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
     (define-key xah-fly-leader-key-map (kbd "z") 'anzu-replace-at-cursor-thing)


#+END_SRC

* Plstore
  #+BEGIN_SRC emacs-lisp
(use-package plstore
:ensure t
:config
(setq plstore-cache-passphrase-for-symmetric-encryption t)
)

  #+END_SRC

* Welcome messge 
  #+BEGIN_SRC emacs-lisp
;; wget -q -O - ru.wttr.in/Ростов-на-Дону?T0
  (princ (shell-command-to-string
          (cl-concatenate 'string
                          "(fortune ; echo '\n\nЗапуск в "
                          (number-to-string (cadr (time-subtract (current-time) ab-start-time)))
                          " сек.\n"
                          "Сегодня: "
                          (format-time-string "%d %B %Y")
                          "'; ) | cowsay -n -f turtle; 
                          echo '\n\n'; 
                          "))
         (get-buffer-create  "*scratch*"))


         
  #+END_SRC
  #+END_SRC

